#!/bin/bash
#
# Copyright (c) 2018 Texas Instruments, Inc.
#
# SPDX-License-Identifier: MIT
#
# Download and install GCC toolchain and required SDK(s) for the board
#
# Usage:
# inst_tools directory board
#
#   * directory - location where toolchain and SDKs will be installed
#   * board - name of board - must contain SoC family name
#
# The URLs below represent the currently supported versions for this
# MicroPython port. As new toolchains and SDKs are released, the URLs
# will be updated, serving as documentation of required versions
#

# TODO : Add MD5SUM check on downloads to detect broken downloads
# TODO : Test for deleted xdctools
# TODO : Verify on MAC

CACHEPATH="${CACHEPATH:-"$(cd "$(dirname "$0")"; pwd -P)/installs"}"

declare -r ARM_NONE_GCC="https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2017q4/gcc-arm-none-eabi-7-2017-q4-major"

declare -r MSP432E4_SDK="http://software-dl.ti.com/simplelink/esd/simplelink_msp432e4_sdk/2.10.00.17/simplelink_msp432e4_sdk_2_10_00_17"
declare -r MSP432P4_SDK="http://software-dl.ti.com/simplelink/esd/simplelink_msp432_sdk/2.10.00.14/simplelink_msp432p4_sdk_2_10_00_14"
declare -r CC3120_SDK="http://software-dl.ti.com/msp430/msp430_public_sw/mcu/msp430/simplelink_sdk_wifi_plugin/1_60_00_07/exports/simplelink_sdk_wifi_plugin_1_60_00_07"

declare -r UNIFLASH="http://software-dl.ti.com/ccs/esd/uniflash/uniflash_sl.4.4.0.1922"

declare -r SAIL_SDK="http://downloads.ti.com/ccs/esd/tirex/zips/sail_1_20_00_02/sail_1_20_00_02"

# Someday ... when these are directly downloadable... for now, these need to be downloaded manually and placed in the "CACHEPATH"
declare -r CC13X2_SDK="http://software-dl.ti.com/simplelink/esd/simplelink_cc13x2_sdk/2.10.00.48/simplelink_cc13x2_sdk_2_10_00_48"
declare -r CC32XX_SDK="http://software-dl.ti.com/simplelink/esd/simplelink_cc32xx_sdk/2.10.00.04/simplelink_cc32xx_sdk_2_10_00_04"

# Global retval for fetch
fetch_retval=""

fetch()
{
    fetch_retval=""

    package=$(basename $1)
    echo Fetching $package

    pushd $CACHEPATH > /dev/null

    if test -f $package
    then
        echo $package found in cache at $CACHEPATH
        fetch_retval=$CACHEPATH/$package
    else
        echo $package not found in cache, downloading from $1 ...
        if curl -O -# -L $1
        then
            fetch_retval=$CACHEPATH/$package
        else
            popd > /dev/null
            echo "could not download $1" 1>&2
            exit 4
        fi
    fi

    popd > /dev/null
}

get_install_gcc()
{
    gcc=$(basename $ARM_NONE_GCC)
    if test -d $gcc
    then
        echo $gcc already installed
        return
    fi

    if $1
    then
        fetch $ARM_NONE_GCC"-linux.tar.bz2"
    else
        fetch $ARM_NONE_GCC"-mac.tar.bz2"
    fi

    echo Unpacking $gcc GCC codegen tools
    tar xf $fetch_retval
}

get_install_sdk()
{
    sdk=$(basename $1)
    if test -d $sdk
    then
        echo $sdk already installed
        return
    fi

    if $2
    then
        fetch $1".run"
        inst_bin=$fetch_retval

        echo Installing $sdk from $inst_bin ...
        chmod +x $inst_bin
        $inst_bin --mode unattended --prefix $PWD
    else
        fetch $1".app.zip"
        inst_bin=$fetch_retval

        echo Installing $sdk from $inst_bin ...
	# unzip outputs to PWD
        unzip -q $inst_bin
        # the --args is for the macOS open command
	installer=$(basename ${inst_bin%.zip})
        open $installer --args --mode unattended --prefix $PWD
	rm -rf ./$installer
    fi
}

get_install_sdk_addon()
{
    addon=$(basename $1)
    if test -d $addon
    then
        echo $addon already installed
        return
    fi

    fetch $1".tar.gz"
    tarball=$fetch_retval
    echo Unpacking $addon addon
    tar xf $tarball
}

get_sail_addon()
{
    addon=$(basename $1)
    if test -d $addon
    then
        echo $addon already installed
        return
    fi

    #need to check if there is a mac specific zip
    if $2
    then
        fetch $1"__linux.zip"
    else
        fetch $1"__linux.zip"
    fi

    tarball=$fetch_retval
    echo Unpacking $addon addon
    unzip $tarball
}

main()
{
    board=${1:-MSP432E4}
    dst=${2:-./tools}

    case $OSTYPE in
        darwin*)
            is_linux=false
            ;;
        linux-gnu*)
            is_linux=true
            ;;
        *)
            echo "unrecognized OS: $OSTYPE" 1>&2
            exit 1
            ;;
    esac

    mkdir -p $CACHEPATH

    mkdir -p $dst
    if ! cd $dst
    then
        echo "could not change to directory $dst" 1>&2
        exit 2
    fi

    echo "INFO :: Board $board"
    echo "INFO :: Installer Cache at $CACHEPATH"
    echo "INFO :: Installed Tools at $dst"

    get_install_gcc $is_linux

    case $board in
        MSP_EXP432E401Y_CC3120)
            get_install_sdk $MSP432E4_SDK $is_linux
            get_install_sdk $CC3120_SDK $is_linux
            get_install_sdk $UNIFLASH $is_linux
            get_sail_addon $SAIL_SDK $is_linux
            ;;
        *CC32*)
            echo "you must manually download CC32XX SDK" 1>&2
            get_install_sdk $CC32XX_SDK $is_linux
            ;;
        *CC13?2*)
            echo "you must manually download CC13X2 SDK" 1>&2
            get_install_sdk $CC13X2_SDK $is_linux
            ;;
        *432E4*)
            get_install_sdk $MSP432E4_SDK $is_linux
            ;;
        *432P4*)
            get_install_sdk $MSP432P4_SDK $is_linux
            ;;
        *)
            echo "unrecognized board: $board" 1>&2
            exit 3
            ;;
    esac
}

main $1 $2
